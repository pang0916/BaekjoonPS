class Node:
    def __init__(self, num, height=1, size=1, left=None, right=None):
        self.num = num
        self.left = left
        self.right = right
        self.height = height
        self.size = size

class AVLtree:
    def __init__(self):
        self.NIL = Node(None, height=0, size=0)
        self.root = self.NIL
        
    def insert(self, x):
        self.root = self.insertItem(self.root, x)
    
    def insertItem(self, node, x):
        if node == self.NIL:
            return Node(x, left=self.NIL, right=self.NIL)
        elif self.root.num <= x:
            node.right = self.insertItem(node.right, x)
        else:
            node.left = self.insertItem(node.left, x)
        node.height = 1 + max(node.left.height, node.right.height)
        node.size = 1 + node.left.size + node.right.size
        return self.balance(node)
    
    def delete(self, x):
        self.root = self.deleteItem(self.root, x)
        
    def deleteItem(self, node, x):
        if node == self.NIL:
            return self.NIL
        elif node.left.size + 1 == x:
            node = self.deleteNode(node)
        elif node.left.size + 1 < x:
            node.right = self.deleteItem(node.right, x)
            node.height = 1 + max(node.left.height, node.right.height)
            node.size = 1 + node.left.size + node.right.size
        else:
            node.left = self.deleteItem(node.left, x)
            node.height = 1 + max(node.left.height, node.right.height)
            node.size = 1 + node.left.size + node.right.size
        return self.balance(node)
    
    def deleteNode(self, node):
        print(node.num)
        if (node.left == self.NIL) and (node.right == self.NIL):
            return self.NIL
        elif node.left == self.NIL:
            return node.right
        elif node.right == self.NIL:
            return node.left
        else:
            num, thisnode = self.deleteMinItem(node.right)
            node.num = num
            node.right = thisnode
            node.height = 1 + max(node.right.height, node.left.height)
            node.size = 1 + node.right.size + node.left.size
            return self.balance(node)
        
    def deleteMinItem(self, node):
        if node.left == self.NIL:
            return node.num, node.right
        else:
            num, thisnode = self.deleteMinItem(node.left)
            node.left = thisnode
            node.height = 1 + max(node.right.height, node.left.height)
            node.size = 1 + node.right.size + node.left.size
            node = self.balance(node)
            return num, node
    
    def balance(self, node):
        if node == self.NIL:
            return node
        x = node.right.height - node.left.height
        if x > 1:
            #RR
            if node.right.right.height >= node.right.left.height:
                node = self.leftRotate(node)
            #RL
            else:
                node.right = self.rightRotate(node.right)
                node = self.leftRotate(node)
        elif x < -1:
            #LL
            if node.left.left.height >= node.left.right.height:
                node = self.rightRotate(node)
            #LR
            else:
                node.left = self.leftRotate(node.left)
                node = self.rightRotate(node)
        return node
    
    def leftRotate(self, node):
        Rchild = node.right
        node.right = Rchild.left
        Rchild.left = node
        node.height = 1 + max(node.left.height, node.right.height)
        node.size = 1 + node.left.size + node.right.size
        Rchild.height = 1 + max(Rchild.left.height, Rchild.right.height)
        Rchild.size = 1 + Rchild.left.size + Rchild.right.size
        return Rchild

    def rightRotate(self, node):
        Lchild = node.left
        node.left = Lchild.right
        Lchild.right = node
        node.height = 1 + max(node.left.height, node.right.height)
        node.size = 1 + node.left.size + node.right.size
        Lchild.height = 1 + max(Lchild.left.height, Lchild.right.height)
        Lchild.size = 1 + Lchild.left.size + Lchild.right.size
        return Lchild
    
tree = AVLtree()
tree.insert(1)
tree.insert(4)
tree.insert(3)
tree.delete(2)